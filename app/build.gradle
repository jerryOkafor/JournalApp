apply plugin: 'com.android.application'

apply plugin: 'kotlin-android'

apply plugin: 'kotlin-android-extensions'

apply plugin: 'kotlin-kapt'

apply plugin: 'jacoco'

jacoco {
    toolVersion '0.8.1'
}


android {
    compileSdkVersion 28

    defaultConfig {
        applicationId "me.jerryhanks.journalapp"
        minSdkVersion 15
        targetSdkVersion 28
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

        kapt {
            arguments {
                arg("room.schemaLocation", "$projectDir/schemas".toString())
            }
        }
    }

    buildTypes {
        debug {
            testCoverageEnabled true
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    sourceSets {
        final String SHARED_TEST_DIR = 'src/common/java'

        test {
            java.srcDirs += 'src/test/kotlin'
            java.srcDirs += SHARED_TEST_DIR
        }
        androidTest {
            java.srcDirs += 'src/androidTest/kotlin'
            java.srcDirs += SHARED_TEST_DIR
        }
    }

    lintOptions {
        lintConfig rootProject.file('lint.xml')
        abortOnError false
        disable 'MissingTranslation', 'RestrictedApi'
    }

    testOptions {
//        execution 'ANDROID_TEST_ORCHESTRATOR'
        animationsDisabled true

        unitTests {
            includeAndroidResources = true
            returnDefaultValues = true
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    androidExtensions {
        experimental true
    }
}

configurations {
    codacy
}


dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation 'com.android.support:appcompat-v7:28.0.0-alpha3'
    implementation 'com.android.support.constraint:constraint-layout:1.1.2'
    implementation 'com.android.support:design:28.0.0-alpha3'
    implementation 'com.android.support:support-v4:28.0.0-alpha3'

    //lifecycle and Livedata
    implementation "android.arch.lifecycle:extensions:$versions.lifecycle"
    implementation "android.arch.lifecycle:common-java8:$versions.lifecycle"

    //paging
    implementation "android.arch.paging:runtime:$versions.paging"

    //room
    implementation "android.arch.persistence.room:runtime:$versions.room"
    kapt "android.arch.persistence.room:compiler:$versions.room"

    //koin
    implementation "org.koin:koin-android:$versions.koin"
    implementation "org.koin:koin-android-architecture:$versions.koin"

    //Firebase
    implementation 'com.google.firebase:firebase-core:16.0.1'
    implementation 'com.google.firebase:firebase-auth:16.0.2'

    //goggle play services auth
    implementation 'com.google.android.gms:play-services-auth:15.0.1'

    //stetho
    implementation "com.facebook.stetho:stetho:$versions.stetho"

    testImplementation 'org.jetbrains.kotlin:kotlin-test-junit:1.2.50'
    testImplementation "org.mockito:mockito-core:$versions.mockito"
    testImplementation "com.nhaarman:mockito-kotlin:$versions.mockito_kotlin"
    testImplementation "org.amshove.kluent:kluent-android:$versions.kluent"
    testImplementation "android.arch.core:core-testing:$versions.lifecycle"
    testImplementation "android.arch.persistence.room:testing:$versions.room"
    testImplementation "android.arch.paging:common:$versions.paging"
    testImplementation "org.koin:koin-test:$versions.koin"

    androidTestImplementation "android.arch.core:core-testing:$versions.lifecycle"
    androidTestImplementation "org.mockito:mockito-android:$versions.mockito"
    androidTestImplementation "org.amshove.kluent:kluent-android:$versions.kluent"
    androidTestImplementation "com.android.support.test:runner:$versions.test"
    androidTestImplementation "com.android.support.test:rules:$versions.test"
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'
    androidTestImplementation "org.koin:koin-test:$versions.koin"
}

def coverageSourceDirs = [
        'src/main/java',
        'src/debug/java',
        "src/main/kotlin"]

def excludes = [
        '**/R.class',
        '**/R$*.class',
        '**/*Test*.*',
        'android/**/*.*',
        '**/*Fragment.*',
        '**/*Activity.*',
        '**/*$ViewInjector*.*',
        '**/*$ViewBinder*.*',
        '**/BuildConfig.*',
        '**/Manifest*.*',
        '**/AutoValue_*.*']

tasks.withType(Test) {
    jacoco.includeNoLocationClasses = true
}

task jacocoTestReport(type: JacocoReport, dependsOn: 'testDebugUnitTest') {
    description = 'Generate JaCoCo coverage reports'
    group = 'Reporting'

    reports {
        xml.enabled = true
        html.enabled = true
    }

    classDirectories =
            fileTree(
                    dir: 'build/intermediates/classes/debug',
                    excludes: excludes) + fileTree(
                    // Kotlin generated classes on Android project (debug build)
                    dir: "$buildDir/tmp/kotlin-classes/debug",
                    excludes: excludes)

    sourceDirectories = files(coverageSourceDirs)
    executionData = fileTree(
            dir: "$buildDir",
            include: ['jacoco/testDebugUnitTest.exec', 'outputs/code-coverage/connected/*coverage.ec']
    )

    doFirst {
        files('build/intermediates/classes/debug').getFiles().each { file ->
            if (file.name.contains('$$')) {
                file.renameTo(file.path.replace('$$', '$'))
            }
        }
    }
}

task uploadCoverageToCodacy(type: JavaExec, dependsOn: jacocoTestReport) {
    main = "com.codacy.CodacyCoverageReporter"
    classpath = configurations.codacy

    args = [
            "report",
            "-l",
            "Java",
            "-r",
            "${buildDir}/reports/jacoco/jacocoTestReport/jacocoTestReport.xml"
    ]
}

task(codacyDepsize) << {
    def size = 0

    configurations.codacy.collect {
        it.length() / (1024 * 1024)
    }.each {
        size += it
    }

    println "Total dependencies size: ${Math.round(size * 100) / 100} MB"

    configurations.codacy.sort {
        -it.length()
    }.each {
        println "${it.name}: ${Math.round(it.length() / (1024) * 100) / 100} KB"
    }
}

task(codacyLocs) << {
    configurations.codacy.each {
        String jarName = it

        println jarName
    }
}

apply plugin: 'com.google.gms.google-services'
